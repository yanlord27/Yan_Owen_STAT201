top10_matrix <- capitals[order(capitals$distance_km), ][1:10,
c("Country.Name", "Capital.Name", "distance_km")]
print(top10_matrix)
#1. Matrix
capitals <- read.csv("capital_cities.csv",
stringsAsFactors = FALSE, check.names = TRUE)
capitals <- subset(capitals, Country.Name != "United States" || "US Minor Outlying Islands")
#1. Matrix
capitals <- read.csv("capital_cities.csv",
stringsAsFactors = FALSE, check.names = TRUE)
capitals <- subset(capitals, Country.Name != "United States" | "US Minor Outlying Islands")
#1. Matrix
capitals <- read.csv("capital_cities.csv",
stringsAsFactors = FALSE, check.names = TRUE)
capitals <- subset(capitals, Country.Name != ("United States" | "US Minor Outlying Islands")
# 3. Reference point in radians
dc_deg <- c(lat = 38.883333, lon = -77)
#1. Matrix
capitals <- read.csv("capital_cities.csv",
stringsAsFactors = FALSE, check.names = TRUE)
capitals <- subset(capitals, Country.Name != "United States")
capitals <- subset(capitals, Country.Name != "US Minor Outlying Islands")
# 3. Reference point in radians
dc_deg <- c(lat = 38.883333, lon = -77)
dc_rad <- dc_deg * pi/180
# 4. Build n×2 matrix of all capitals (lat, lon) in radians
mat_rad <- as.matrix(capitals[, c("Capital.Latitude", "Capital.Longitude")]) * pi/180
# 5. Compute element-wise deltas
delta <- mat_rad - matrix(dc_rad, nrow = nrow(mat_rad), ncol = 2, byrow = TRUE)
# 6. Haversine formula
a <- sin(delta[,1]/2)^2 +
cos(dc_rad[1]) * cos(mat_rad[,1]) * sin(delta[,2]/2)^2
R <- 6371  # Earth radius in km
dist_km <- 2 * R * asin(pmin(1, sqrt(a)))
# 7. Attach distances and select top 10
capitals$distance_km <- dist_km
top10_matrix <- capitals[order(capitals$distance_km), ][1:10,
c("Country.Name", "Capital.Name", "distance_km")]
print(top10_matrix)
#1. Matrix
capitals <- read.csv("capital_cities.csv",
stringsAsFactors = FALSE,
check.names = TRUE)
country_names <- capitals$Country.Name
coordinates_capital_cities <- as.matrix(
capitals[, c("Capital.Latitude", "Capital.Longitude")]
)
# 3. Find the row for Washington DC
idx_dc   <- which(country_names == "United States")
dc_coords <- coordinates_capital_cities[idx_dc, ]  # length‐2 numeric
# 4. Build a matrix of DC coords repeated for each capital
dc_mat   <- matrix(dc_coords,
nrow = nrow(coordinates_capital_cities),
ncol = 2,
byrow = TRUE)
# 5. Element‐wise subtraction and Euclidean distance
diff_mat  <- coordinates_capital_cities - dc_mat
distances <- apply(diff_mat, 1, function(z) sqrt(sum(z^2)))
# 6. Exclude zero‐distance (US & outlying islands) and rank
valid      <- distances > 0
ord        <- order(distances[valid])
top10_idx  <- which(valid)[ ord[1:10] ]
# 7. Print top‐10 country names
cat("Top 10 countries closest to Washington DC:\n")
print(country_names[top10_idx])
# 8. Print a matrix of their coordinates
cat("\nCoordinates of those 10 capitals (lat, lon):\n")
print(coordinates_capital_cities[top10_idx, ])
### 2) Data‐frame (row‐wise) approach
# 1. Read in the data
cap2 <- read.csv("capital_cities.csv",
stringsAsFactors = FALSE,
check.names = TRUE)
# 2. Build a small df and drop US & outlying islands by filtering distance > 0
df <- data.frame(
country = cap2$Country.Name,
lat     = cap2$Capital.Latitude,
lon     = cap2$Capital.Longitude,
stringsAsFactors = FALSE
)
# 3. Lookup DC coords
dc_lat <- df$lat[df$country == "United States"]
dc_lon <- df$lon[df$country == "United States"]
# 4. Compute Euclidean distance for each row
df$dist <- sqrt((df$lat - dc_lat)^2 + (df$lon - dc_lon)^2)
# 5. Filter out zero‐distance rows and take the 10 smallest
df2   <- df[df$dist > 0, ]
df2   <- df2[order(df2$dist), ]
top10 <- head(df2, 10)
# 6. Print top‐10 country names
cat("Top 10 countries closest to Washington DC:\n")
print(top10$country)
# 7. Print their coordinates as a matrix
cat("\nCoordinates of those 10 capitals (lat, lon):\n")
print(as.matrix(top10[, c("lat", "lon")]))
bears <- c(20, 17, 10, 28, 13, 30, 13, 17, 16, 26, 12, 28, 17, 27)
opponent <- c(27, 41, 31, 20, 19, 12, 30, 24, 13, 31, 10, 13, 20, 16)
bears <- append(bears, 40, after = 4)
opponent <- append(opponent, 38, after = 0)
print(bears)
print(opponent)
spreads <- bears - opponent
max_spread <- max(spreads)
idx <- which(spreads == max_spread)[1]
bears_score    <- bears[idx]
opponent_score <- opponent[idx]
cat(
sprintf(
"The largest win spread is %d, when the Bears scored %d points and the Opponent scored %d points.",
max_spread, bears_score, opponent_score
)
)
game_score <- matrix(
c(bears, opponent),   # stack both vectors end-to-end
ncol = 2,             # 2 columns
byrow = FALSE         # fill column‐wise
)
colnames(game_score) <- c("bears", "opponent")
print(game_score)
game_score <- matrix(c(bears, opponent),   ncol = 2)
colnames(game_score) <- c("bears", "opponent")
print(game_score)
game_score <- matrix(c(bears, opponent),   ncol = 2)
colnames(game_score) <- c("bears", "opponent")
print(game_score)
game_score <- matrix(c(bears, opponent),   ncol = 2)
colnames(game_score) <- c("bears", "opponent")
print(game_score)
game_score <- matrix(c(bears, opponent),   ncol = 2,byrow=FALSE)
colnames(game_score) <- c("bears", "opponent")
print(game_score)
game_score <- matrix(c(bears, opponent),   ncol = 2,byrow=FALSE)
colnames(game_score) <- c("bears", "opponent")
print(game_score)
game_score <- matrix(c(bears, opponent),   ncol = 2)
colnames(game_score) <- c("bears", "opponent")
print(game_score)
new_games <- matrix(c(37,  9,17, 17),ncol = 2,byrow = TRUE
)
colnames(new_games) <- colnames(game_score)
# append as new rows
game_score <- rbind(game_score, new_games)
print(game_score)
missing_games <- matrix(c(37,  9,17, 17),ncol = 2,)
colnames(missing_games) <- colnames(game_score)
# append as new rows
game_score <- rbind(game_score, missing_games)
print(game_score)
missing_games <- matrix(c(37,  9,17, 17),ncol = 2,byrow = TRUE
)
colnames(missing_games) <- colnames(game_score)
# append as new rows
game_score <- rbind(game_score, missing_games)
print(game_score)
missing_games <- matrix(c(37,  17,9, 17),ncol = 2,byrow = TRUE
)
colnames(missing_games) <- colnames(game_score)
# append as new rows
game_score <- rbind(game_score, missing_games)
print(game_score)
bears <- c(20, 17, 10, 28, 13, 30, 13, 17, 16, 26, 12, 28, 17, 27)
opponent <- c(27, 41, 31, 20, 19, 12, 30, 24, 13, 31, 10, 13, 20, 16)
bears <- append(bears, 40, after = 4)
opponent <- append(opponent, 38, after = 0)
print(bears)
print(opponent)
spreads <- bears - opponent
max_spread <- max(spreads)
idx <- which(spreads == max_spread)[1]
bears_score    <- bears[idx]
opponent_score <- opponent[idx]
cat(
sprintf(
"The largest win spread is %d, when the Bears scored %d points and the Opponent scored %d points.",
max_spread, bears_score, opponent_score
)
)
game_score <- matrix(c(bears, opponent),   ncol = 2)
colnames(game_score) <- c("bears", "opponent")
print(game_score)
missing_games <- matrix(c(37,  17,9, 17),ncol = 2,byrow = TRUE
)
colnames(missing_games) <- colnames(game_score)
# append as new rows
game_score <- rbind(game_score, missing_games)
print(game_score)
for (i in seq_len(nrow(game_score))) {
if (game_score[i, "bears"] > game_score[i, "opponent"]) {
cat("Win\n")
} else {
cat("Loss\n")
}
}
for (i in 1:nrow(game_score)) {
if (game_score[i, "bears"] > game_score[i, "opponent"]) {
cat("Win\n")
} else {
cat("Loss\n")
}
}
win <- game_score[, "bears"] > game_score[, "opponent"]
print(win)
game_score <- cbind(game_score, win = win)
game_score <- cbind(game_score, win = win)
print(game_score)
game_score <- matrix(c(bears, opponent),   ncol = 2)
colnames(game_score) <- c("bears", "opponent")
print(game_score)
missing_games <- matrix(c(37,  17,9, 17),ncol = 2,byrow = TRUE)
colnames(missing_games) <- colnames(game_score)
game_score <- rbind(game_score, missing_games)
print(game_score)
for (i in 1:nrow(game_score)) {
if (game_score[i, "bears"] > game_score[i, "opponent"]) {
cat("Win\n")
} else {
cat("Loss\n")
}
}
win <- game_score[, "bears"] > game_score[, "opponent"]
print(win)
game_score <- cbind(game_score, win = win)
print(game_score)
# index of first TRUE
first_win_idx <- which(game_score[, "win"])[1]
# index of first TRUE
first_win_idx <- which(game_score[, "win"])[1]
# index of first TRUE
first_win_idx <- which(game_score[, "win"])==1
# index of first TRUE
first_win_idx <- which(game_score[, "win"]==1)[1]
# how many FALSE before that index
losses_before_first_win <- sum(!game_score[1:(first_win_idx - 1), "win"])
cat(
"Number of games the Bears lost before their first win:",
losses_before_first_win,
"\n"
)
# index of first TRUE
first_win_idx <- which(game_score[, "win"]==1)[1]
# how many FALSE before that index
losses_before_first_win <- sum(!game_score[1:(first_win_idx - 1), "win"])
cat(
"Number of games the Bears lost before their first win:",
losses_before_first_win,
"\n"
)
# index of first TRUE
first_win_idx <- which(game_score[, "win"]==1)[1]
# how many FALSE before that index
losses_before_first_win <- sum(!game_score[1:(first_win_idx - 1), "win"])
cat(
"Number of games the Bears lost before their first win:",
losses_before_first_win,
"\n"
)
# index of first TRUE
first_win_idx <- which(game_score[, "win"]==1)[1]
# how many FALSE before that index
losses_before_first_win <- sum(!game_score[1:(first_win_idx - 1), "win"])
cat(
"Number of games the Bears lost before their first win:",
losses_before_first_win,
"\n"
)
# index of first TRUE
first_win_idx <- which(game_score[, "win"]==1)[1]
# how many FALSE before that index
losses_before_first_win <- sum(!game_score[1:(first_win_idx - 1), "win"])
cat(
"Number of games the Bears lost before their first win:",
losses_before_first_win,
"\n"
)
# index of first TRUE
first_win_idx <- which(game_score[, "win"]==1)[1]
# how many FALSE before that index
losses_before_first_win <- sum(!game_score[1:(first_win_idx - 1), "win"])
cat(
"Number of games the Bears lost before their first win:",
losses_before_first_win
)
# index of first TRUE
first_win_idx <- which(game_score[, "win"]==1)[1]
# how many FALSE before that index
losses_before_first_win <- sum(!game_score[1:(first_win_idx - 1), "win"])
cat("Number of games the Bears lost before their first win:", losses_before_first_win)
number_of_factors <- function(n) {
divs <- 1:n
# check which of these divide n evenly
is_div  <- (n %% divs) == 0
# count how many TRUEs
sum(is_div)
}
# Test it on 8
number_of_factors(8)
#> [1] 4
number_of_factors <- function(n) {
divs <- 1:n
is_div  <- (n %% divs) == 0
sum(is_div)
}
number_of_factors(8)
number <- 2
is_prime <- TRUE
for (i in 2:(number-1)) {
if (number %% i == 0) {
is_prime <- FALSE
break
}
}
if (is_prime) {
cat(number, "is a prime number.\n")
} else {
cat(number, "is not a prime number.\n")
}
number <- 89
is_prime <- TRUE
for (i in 2:(number-1)) {
if (number %% i == 0) {
is_prime <- FALSE
break
}
}
if (is_prime) {
cat(number, "is a prime number.\n")
} else {
cat(number, "is not a prime number.\n")
}
rectangle_area <- function(length = 48, width = 48) {
area_sq_in <- length * width
area_sq_ft <- area_sq_in / (12^2)
list(square_inches = area_sq_in,square_feet   = area_sq_ft)
}
area <- rectangle_area(102, 60)
cat(sprintf("The area in square inches is %d.\n", area$square_inches))
cat(sprintf("The area in square feet is %.2f.\n", area$square_feet))
rectangle_area <- function(length = 48, width = 48) {
area_sq_in <- length * width
area_sq_ft <- area_sq_in / (12^2)
list(square_inches = area_sq_in,square_feet   = area_sq_ft)
}
area <- rectangle_area(102, 60)
cat(sprintf("The area in square inches is %d.", area$square_inches))
cat(sprintf("The area in square feet is %.2f.\n", area$square_feet))
rectangle_area <- function(length = 48, width = 48) {
area_sq_in <- length * width
area_sq_ft <- area_sq_in / (12^2)
list(square_inches = area_sq_in,square_feet   = area_sq_ft)
}
area <- rectangle_area(102, 60)
cat(sprintf("The area in square inches is %d.\n", area$square_inches))
cat(sprintf("The area in square feet is %d.\n", area$square_feet))
rectangle_area <- function(length = 48, width = 48) {
area_sq_in <- length * width
area_sq_ft <- area_sq_in / (12^2)
list(square_inches = area_sq_in,square_feet   = area_sq_ft)
}
area <- rectangle_area(102, 60)
cat(sprintf("The area in square inches is %d.\n", area$square_inches))
cat(sprintf("The area in square feet is %f.\n", area$square_feet))
longest_words <- function(words) {
lens   <- nchar(words)
maxlen <- max(lens)
words[lens == maxlen]
}
longest_words(fruits)
longest_words <- function(words) {
lens   <- nchar(words)
maxlen <- max(lens)
words[lens == maxlen]
}
fruits <- c("apple", "orange", "banana",
"pear", "grapes", "kiwi")
longest_words(fruits)
is_in_vector <- function(val, vec) {
val %in% vec
}
value <- 2
check <- seq(1, 15, 3)
present <- is_in_vector(value, check)
if (present) {
cat(sprintf("%d is in the vector.\n", value))
} else {
cat(sprintf("%d is not in the vector.\n", value))
}
is_in_vector <- function(val, vec) {
val %in% vec
}
value <- 2
check <- seq(1, 15, 3)
in_vec <- is_in_vector(value, check)
if (in_vec) {
cat(sprintf("%d is in the vector.\n", value))
} else {
cat(sprintf("%d is not in the vector.\n", value))
}
is_in_vector <- function(val, vec) {
val %in% vec
}
value <- 2
check <- seq(1, 15, 1)
in_vec <- is_in_vector(value, check)
if (in_vec) {
cat(sprintf("%d is in the vector.\n", value))
} else {
cat(sprintf("%d is not in the vector.\n", value))
}
is_in_vector <- function(val, vec) {
val %in% vec
}
value <- 2
check <- seq(1, 15, 3)
in_vec <- is_in_vector(value, check)
if (in_vec) {
cat(sprintf("%d is in the vector.\n", value))
} else {
cat(sprintf("%d is not in the vector.\n", value))
}
# Don't change this! A seed keeps results consistent.
set.seed(123)
x <- matrix(sample(-50:50, 20), nrow = 5)
# Don't change this! A seed keeps results consistent.
set.seed(123)
x <- matrix(sample(-50:50, 20), nrow = 5)
# Don't change this! A seed keeps results consistent.
set.seed(123)
x <- matrix(sample(-50:50, 20), nrow = 5)
# Don't change this! A seed keeps results consistent.
set.seed(123)
x <- matrix(sample(-50:50, 20), nrow = 5)
# Don't change this! A seed keeps results consistent.
set.seed(123)
x <- matrix(sample(-50:50, 20), nrow = 5)
neg_to_na <- function(mat) {
mat[ mat < 0 ] <- NA
mat
}
x_na <- neg_to_na(x)
print(x_na)
neg_to_na <- function(mat) {
mat[ mat < 0 ] <- NA
mat
}
print(x_na)
x_na <- neg_to_na(x)
print(x_na)
# Don't change this! A seed keeps results consistent.
set.seed(123)
x <- matrix(sample(-50:50, 20), nrow = 5)
neg_to_na <- function(mat) {
mat[ mat < 0 ] <- NA
mat
}
print(x_na)
x_na <- neg_to_na(x)
print(x_na)
# Don't change this! A seed keeps results consistent.
set.seed(123)
x <- matrix(sample(-50:50, 20), nrow = 5)
neg_to_na <- function(mat) {
mat[ mat < 0 ] <- NA
mat
}
print(x)
x_na <- neg_to_na(x)
print(x_na)
# Don't change this! A seed keeps results consistent.
set.seed(123)
x <- matrix(sample(-50:50, 20), nrow = 5)
neg_to_na <- function(mat) {
mat[ mat < 0 ] <- NA
mat
}
x_na <- neg_to_na(x)
print(x_na)
even_odd <- function(mat) {
mat2 <- mat
mat2[ mat2 %% 2 == 0 ] <- 1
mat2[ mat2 %% 2 != 0 ] <- 0
mat2
}
# Test it
x_bin <- even_odd(x)
print(x_bin)
even_odd <- function(mat) {
mat2 <- mat
mat2[ mat %% 2 == 0 ] <- 1
mat2[ mat %% 2 != 0 ] <- 0
mat2
}
# Test it
x_bin <- even_odd(x)
print(x_bin)
even_odd <- function(mat) {
mat2 <- mat
mat2[ mat %% 2 == 0 ] <- 1
mat2[ mat %% 2 != 0 ] <- 0
mat2
}
print(x)
# Test it
x_bin <- even_odd(x)
print(x_bin)
even_odd <- function(mat) {
mat2 <- mat
mat2[ mat %% 2 == 0 ] <- 1
mat2[ mat %% 2 != 0 ] <- 0
mat2
}
x_bin <- even_odd(x)
print(x_bin)
